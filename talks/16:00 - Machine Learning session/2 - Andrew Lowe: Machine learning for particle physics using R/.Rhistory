replace(is.na(.), 0)
}
adj.mat <- function(x) {
rownames(x) <- x$V1 # dplyr does not support rownames
mat <- as.matrix(select(x, -V1))
diag(mat) <- 0 # remove self-links between labelling algorithms
# Elements = fraction of all jets given a pair of labels (row, column):
mat <- 100 * mat / nrow(DT.y)
mat.names <- rownames(mat)
algo.names <- unique(substr(mat.names, 1, nchar(mat.names) - 2))
label.names <- unique(substr(mat.names, nchar(mat.names), nchar(mat.names)))
out <- list(
"mat" = mat,
"mat.names" = mat.names,
"algo.names" =  algo.names,
"label.names" = label.names
)
return(out)
}
# Very few heavy flavour jets, so pick bold colours to make them stand out:
chord.cols <- c("grey", # no label
ggcols[12], # bottom
ggcols[5], # charm
ggcols[1], # gluon
ggcols[7], # light quark
ggcols[2] # photon
)
# Order of legend text; used later for bar chart:
preferred.order <- c(1, 5, 4, 3, 2, 6)
plot.chordDiagram <- function(x) {
mat <- x$mat
mat.names <- x$mat.names
algo.names <- x$algo.names
label.names <- x$label.names
grid.col <- setNames(rep(chord.cols, length(algo.names)),
union(rownames(mat), colnames(mat)))
par(mar = c(0, 0, 0, 0), mfrow = c(1, 1))
circos.par(gap.degree = 2, points.overflow.warning = FALSE)
nice.algo.names <- algo.names  %>%
gsub("GA.MaxPt", "GA max-p\U1D40", .) %>%
gsub("GA.QCDaware", "GA QCD-aware", .) %>%
gsub("GA.Reclustered", "Reclustered", .) %>%
gsub("Cone.MaxPt", "Cone max-p\U1D40", .) %>%
gsub("Cone.QCDaware", "Cone QCD-aware", .)
lwd_mat = matrix(0.001, nrow = nrow(mat), ncol = ncol(mat))
rownames(lwd_mat) = rownames(mat)
colnames(lwd_mat) = colnames(mat)
lwd_mat[mat > 1] = 1
border_mat <- matrix(rep(grid.col, length(grid.col)),
nrow = length(grid.col),
ncol = length(grid.col))
chordDiagram(mat,
link.lwd = lwd_mat,
link.border = border_mat,
annotationTrack = "grid",
preAllocateTracks = 1,
grid.col = grid.col,
grid.border = NULL)
circos.trackPlotRegion(track.index = 1, panel.fun = function(x, y) {
xlim = get.cell.meta.data("xlim")
ylim = get.cell.meta.data("ylim")
sector.name = get.cell.meta.data("sector.index")
sector.names = substr(sector.name, nchar(sector.name), nchar(sector.name))
circos.text(cex = 1,
mean(xlim),
ylim[1] + 0.25,
sector.names,
facing = "downward",
niceFacing = TRUE)
# circos.axis(h = "top",
#             labels.cex = 0.6,
#             major.tick.percentage = 0.2,
#             sector.index = sector.name,
#             track.index = 2)
}, bg.border = NA)
all_sectors = get.all.sector.index()
rou1 = get.cell.meta.data("yplot",
sector.index = all_sectors[1],
track.index = 2)[1]
rou2 = get.cell.meta.data("yplot",
sector.index = all_sectors[1],
track.index = 1)[2]
start.indices <- c(1,
seq(from = 1 + length(label.names),
to = length(label.names) * (length(algo.names)),
by = length(label.names)))
end.indices <- seq(from = 1 + length(label.names),
to = 1 + length(label.names) * length(algo.names),
by = length(label.names)) - 1
indices <- split(
c(1:length(mat.names)),
as.integer((seq_along(1:length(mat.names)) - 1) / length(label.names))
)
for(i in seq(from = 1, to = length(algo.names))) {
start.degree = get.cell.meta.data(
"xplot",
sector.index = all_sectors[head(indices[[i]], 1)],
track.index = 2)[1] + 0.5
end.degree = get.cell.meta.data(
"xplot",
sector.index = all_sectors[tail(indices[[i]], 1)],
track.index = 2)[2] - 0.5
draw.sector(start.degree,
end.degree,
rou1,
rou1 + 0.2,
clock.wise = TRUE,
col = NA,
border = "grey60",
lty = "solid")
m = reverse.circlize(
(start.degree + end.degree) / 2,
rou1+0.225,
sector.index = all_sectors[1],
track.index = 1)
circos.text(m[1, 1], m[1, 2],
nice.algo.names[i],
cex = 1,
facing = "bending",
adj = c(0.5, 0),
niceFacing = TRUE,
sector.index = all_sectors[1],
track.index = 1)
}
# Add a legend:
legend.text <- paste0(label.names, ": ",
c("no label",
"bottom",
"charm",
"gluon",
"light quark",
"photon")
)
legend("bottomleft",
bty = "n",
pch = 19,
legend = legend.text[preferred.order],
col = chord.cols[preferred.order],
cex = 1.0)
# Done!
circos.clear()
}
require(RCircos)
# Make an explicit (deep) copy of the data; we want to preserve DT:
DT.y <- copy(DT[, (label.schemes), with = FALSE])
# DT.y = a data.table with just the labels (y)
# Utility function to merge light quarks (u,d,s) into a single class:
merge.lightquarks <- function(x) { ifelse(x != 0 & abs(x) <= 3, 1, abs(x)) }
DT.y <- DT.y[, Cone.MaxPt := merge.lightquarks(Cone.MaxPt)]
DT.y <- DT.y[, Cone.QCDaware := merge.lightquarks(Cone.QCDaware)]
DT.y <- DT.y[, GA.QCDaware := merge.lightquarks(GA.QCDaware)]
DT.y <- DT.y[, GA.MaxPt := merge.lightquarks(GA.MaxPt)]
DT.y <- DT.y[, GA.Reclustered := merge.lightquarks(GA.Reclustered)]
# Utility function to merge leptons (e, mu) into unlabelled class:
merge.leptons.nolabel <- function(x)
ifelse(abs(x) == 11 | abs(x) == 13, 0, abs(x))
DT.y <- DT.y[, Cone.MaxPt := merge.leptons.nolabel(Cone.MaxPt)]
DT.y <- DT.y[, Cone.QCDaware := merge.leptons.nolabel(Cone.QCDaware)]
DT.y <- DT.y[, GA.QCDaware := merge.leptons.nolabel(GA.QCDaware)]
DT.y <- DT.y[, GA.MaxPt := merge.leptons.nolabel(GA.MaxPt)]
DT.y <- DT.y[, GA.Reclustered := merge.leptons.nolabel(GA.Reclustered)]
# Create special character labels in unicode:
gamma <- "\U03B3" # a letter gamma
tau <- "\U03C4" # a letter tau
none <- "\U2205" # null sign
factor.label <- function(x) {
x <- factor(x)
levels(x) <- list("\U2205" = "0", # null (empty set) symbol
"q" = "1",
"c" = "4",
"b" = "5",
"e" = "11",
"\U03BC" = "13", # a Greek letter mu
"\U03C4" = "15", # a Greek letter tau
"g" = "21",
"\U03B3" = "22" # a Greek letter gamma
)
droplevels(x)
}
DT.y <- DT.y[, Cone.MaxPt := factor.label(Cone.MaxPt)]
DT.y <- DT.y[, Cone.QCDaware := factor.label(Cone.QCDaware)]
DT.y <- DT.y[, GA.QCDaware := factor.label(GA.QCDaware)]
DT.y <- DT.y[, GA.MaxPt := factor.label(GA.MaxPt)]
DT.y <- DT.y[, GA.Reclustered := factor.label(GA.Reclustered)]
Store(DT.y)
if(DRAFT) print(
sapply(DT.y[, (label.schemes), with = FALSE], function(x) sort(unique(x)))
)
# Utility function; are pairs equal?
distinct.pairs <- function(x) {
x[2] != x[3]
}
# Utility function; are all items equal?
all.identical <- function(x) { length(unique(x)) == 1 }
# Count occurrences of pairwise label assignments:
pairs.count <- function(x) {
x %>%
select(one_of(label.schemes)) %>%
# Convert to data.frame:
as.data.frame() %>%
# Add a jet ID column:
mutate(jet.id = seq(nrow(.))) %>%
# Melt to long format:
melt(id = "jet.id") %>%
# Paste together the labeller name and the label:
mutate(Scheme = as.ordered(paste0(variable, ".", as.character(value)))) %>%
# Filter the jet ID and labeller name + label:
select(jet.id, Scheme) %>%
# Join:
inner_join(., ., by = "jet.id") %>%
# Sort the rows so that x,y and y,x are both x,y:
mutate(V1 = ifelse(
Scheme.x >= Scheme.y, as.character(Scheme.x), as.character(Scheme.y))
) %>%
mutate(V2 = ifelse(
Scheme.x >= Scheme.y, as.character(Scheme.y), as.character(Scheme.x))
) %>%
# Select just the jet ID and the order row items:
select(jet.id, V1, V2) %>%
# Filter out duplicates; x,y == y,x:
distinct() %>%
# Clean, group and sort:
select(V1, V2) %>%
group_by(V1, V2) %>%
# Tally counts:
summarise(count = n())
}
adj.all <- function(x) {
x %>%
# Cast to wide format (label a * label b)
dcast(V1 ~ V2) %>%
# Replace the NAs with zeros:
replace(is.na(.), 0)
}
adj.matched <- function(x) {
x %>%
# Remove auto-correlations; if label is the same, make count = 0:
mutate(count = as.integer(
ifelse(
substr(V1, nchar(V1), nchar(V1)) == substr(V2, nchar(V2), nchar(V2)),
count,
0)
)) %>%
# Cast to wide format (label a * label b)
dcast(V1 ~ V2) %>%
# Replace the NAs with zeros:
replace(is.na(.), 0)
}
adj.mismatched <- function(x) {
x %>%
# Remove auto-correlations; if label is the same, make count = 0:
mutate(count = as.integer(
ifelse(
substr(V1, nchar(V1), nchar(V1)) != substr(V2, nchar(V2), nchar(V2)),
count,
0)
)) %>%
# Cast to wide format (label a * label b)
dcast(V1 ~ V2) %>%
# Replace the NAs with zeros:
replace(is.na(.), 0)
}
adj.mat <- function(x) {
rownames(x) <- x$V1 # dplyr does not support rownames
mat <- as.matrix(select(x, -V1))
diag(mat) <- 0 # remove self-links between labelling algorithms
# Elements = fraction of all jets given a pair of labels (row, column):
mat <- 100 * mat / nrow(DT.y)
mat.names <- rownames(mat)
algo.names <- unique(substr(mat.names, 1, nchar(mat.names) - 2))
label.names <- unique(substr(mat.names, nchar(mat.names), nchar(mat.names)))
out <- list(
"mat" = mat,
"mat.names" = mat.names,
"algo.names" =  algo.names,
"label.names" = label.names
)
return(out)
}
# Very few heavy flavour jets, so pick bold colours to make them stand out:
chord.cols <- c("grey", # no label
ggcols[12], # bottom
ggcols[5], # charm
ggcols[1], # gluon
ggcols[7], # light quark
ggcols[2] # photon
)
# Order of legend text; used later for bar chart:
preferred.order <- c(1, 5, 4, 3, 2, 6)
plot.chordDiagram <- function(x) {
mat <- x$mat
mat.names <- x$mat.names
algo.names <- x$algo.names
label.names <- x$label.names
grid.col <- setNames(rep(chord.cols, length(algo.names)),
union(rownames(mat), colnames(mat)))
par(mar = c(0, 0, 0, 0), mfrow = c(1, 1))
circos.par(gap.degree = 2, points.overflow.warning = FALSE)
nice.algo.names <- algo.names  %>%
gsub("GA.MaxPt", "GA max-p\U1D40", .) %>%
gsub("GA.QCDaware", "GA QCD-aware", .) %>%
gsub("GA.Reclustered", "Reclustered", .) %>%
gsub("Cone.MaxPt", "Cone max-p\U1D40", .) %>%
gsub("Cone.QCDaware", "Cone QCD-aware", .)
lwd_mat = matrix(0.001, nrow = nrow(mat), ncol = ncol(mat))
rownames(lwd_mat) = rownames(mat)
colnames(lwd_mat) = colnames(mat)
lwd_mat[mat > 1] = 1
border_mat <- matrix(rep(grid.col, length(grid.col)),
nrow = length(grid.col),
ncol = length(grid.col))
chordDiagram(mat,
link.lwd = lwd_mat,
link.border = border_mat,
annotationTrack = "grid",
preAllocateTracks = 1,
grid.col = grid.col,
grid.border = NULL)
circos.trackPlotRegion(track.index = 1, panel.fun = function(x, y) {
xlim = get.cell.meta.data("xlim")
ylim = get.cell.meta.data("ylim")
sector.name = get.cell.meta.data("sector.index")
sector.names = substr(sector.name, nchar(sector.name), nchar(sector.name))
circos.text(cex = 1,
mean(xlim),
ylim[1] + 0.25,
sector.names,
facing = "downward",
niceFacing = TRUE)
# circos.axis(h = "top",
#             labels.cex = 0.6,
#             major.tick.percentage = 0.2,
#             sector.index = sector.name,
#             track.index = 2)
}, bg.border = NA)
all_sectors = get.all.sector.index()
rou1 = get.cell.meta.data("yplot",
sector.index = all_sectors[1],
track.index = 2)[1]
rou2 = get.cell.meta.data("yplot",
sector.index = all_sectors[1],
track.index = 1)[2]
start.indices <- c(1,
seq(from = 1 + length(label.names),
to = length(label.names) * (length(algo.names)),
by = length(label.names)))
end.indices <- seq(from = 1 + length(label.names),
to = 1 + length(label.names) * length(algo.names),
by = length(label.names)) - 1
indices <- split(
c(1:length(mat.names)),
as.integer((seq_along(1:length(mat.names)) - 1) / length(label.names))
)
for(i in seq(from = 1, to = length(algo.names))) {
start.degree = get.cell.meta.data(
"xplot",
sector.index = all_sectors[head(indices[[i]], 1)],
track.index = 2)[1] + 0.5
end.degree = get.cell.meta.data(
"xplot",
sector.index = all_sectors[tail(indices[[i]], 1)],
track.index = 2)[2] - 0.5
draw.sector(start.degree,
end.degree,
rou1,
rou1 + 0.2,
clock.wise = TRUE,
col = NA,
border = "grey60",
lty = "solid")
m = reverse.circlize(
(start.degree + end.degree) / 2,
rou1+0.225,
sector.index = all_sectors[1],
track.index = 1)
circos.text(m[1, 1], m[1, 2],
nice.algo.names[i],
cex = 1,
facing = "bending",
adj = c(0.5, 0),
niceFacing = TRUE,
sector.index = all_sectors[1],
track.index = 1)
}
# Add a legend:
legend.text <- paste0(label.names, ": ",
c("no label",
"bottom",
"charm",
"gluon",
"light quark",
"photon")
)
legend("bottomleft",
bty = "n",
pch = 19,
legend = legend.text[preferred.order],
col = chord.cols[preferred.order],
cex = 1.0)
# Done!
circos.clear()
}
# Make an explicit (deep) copy of the data; we want to preserve DT:
DT.y <- copy(DT[, (label.schemes), with = FALSE])
# DT.y = a data.table with just the labels (y)
# Utility function to merge light quarks (u,d,s) into a single class:
merge.lightquarks <- function(x) { ifelse(x != 0 & abs(x) <= 3, 1, abs(x)) }
DT.y <- DT.y[, Cone.MaxPt := merge.lightquarks(Cone.MaxPt)]
DT.y <- DT.y[, Cone.QCDaware := merge.lightquarks(Cone.QCDaware)]
DT.y <- DT.y[, GA.QCDaware := merge.lightquarks(GA.QCDaware)]
DT.y <- DT.y[, GA.MaxPt := merge.lightquarks(GA.MaxPt)]
DT.y <- DT.y[, GA.Reclustered := merge.lightquarks(GA.Reclustered)]
# Utility function to merge leptons (e, mu) into unlabelled class:
merge.leptons.nolabel <- function(x)
ifelse(abs(x) == 11 | abs(x) == 13, 0, abs(x))
DT.y <- DT.y[, Cone.MaxPt := merge.leptons.nolabel(Cone.MaxPt)]
DT.y <- DT.y[, Cone.QCDaware := merge.leptons.nolabel(Cone.QCDaware)]
DT.y <- DT.y[, GA.QCDaware := merge.leptons.nolabel(GA.QCDaware)]
DT.y <- DT.y[, GA.MaxPt := merge.leptons.nolabel(GA.MaxPt)]
DT.y <- DT.y[, GA.Reclustered := merge.leptons.nolabel(GA.Reclustered)]
# Create special character labels in unicode:
gamma <- "\U03B3" # a letter gamma
tau <- "\U03C4" # a letter tau
none <- "\U2205" # null sign
factor.label <- function(x) {
x <- factor(x)
levels(x) <- list("\U2205" = "0", # null (empty set) symbol
"q" = "1",
"c" = "4",
"b" = "5",
"e" = "11",
"\U03BC" = "13", # a Greek letter mu
"\U03C4" = "15", # a Greek letter tau
"g" = "21",
"\U03B3" = "22" # a Greek letter gamma
)
droplevels(x)
}
DT.y <- DT.y[, Cone.MaxPt := factor.label(Cone.MaxPt)]
DT.y <- DT.y[, Cone.QCDaware := factor.label(Cone.QCDaware)]
DT.y <- DT.y[, GA.QCDaware := factor.label(GA.QCDaware)]
DT.y <- DT.y[, GA.MaxPt := factor.label(GA.MaxPt)]
DT.y <- DT.y[, GA.Reclustered := factor.label(GA.Reclustered)]
Store(DT.y)
if(DRAFT) print(
sapply(DT.y[, (label.schemes), with = FALSE], function(x) sort(unique(x)))
)
# Utility function; are pairs equal?
distinct.pairs <- function(x) {
x[2] != x[3]
}
# We specify label schemes in use:
label.schemes <- c("Cone.MaxPt",
"Cone.QCDaware",
"GA.QCDaware",
"GA.MaxPt",
"GA.Reclustered")
# Make an explicit (deep) copy of the data; we want to preserve DT:
DT.y <- copy(DT[, (label.schemes), with = FALSE])
# DT.y = a data.table with just the labels (y)
# Utility function to merge light quarks (u,d,s) into a single class:
merge.lightquarks <- function(x) { ifelse(x != 0 & abs(x) <= 3, 1, abs(x)) }
DT.y <- DT.y[, Cone.MaxPt := merge.lightquarks(Cone.MaxPt)]
DT.y <- DT.y[, Cone.QCDaware := merge.lightquarks(Cone.QCDaware)]
DT.y <- DT.y[, GA.QCDaware := merge.lightquarks(GA.QCDaware)]
DT.y <- DT.y[, GA.MaxPt := merge.lightquarks(GA.MaxPt)]
DT.y <- DT.y[, GA.Reclustered := merge.lightquarks(GA.Reclustered)]
# Utility function to merge leptons (e, mu) into unlabelled class:
merge.leptons.nolabel <- function(x)
ifelse(abs(x) == 11 | abs(x) == 13, 0, abs(x))
DT.y <- DT.y[, Cone.MaxPt := merge.leptons.nolabel(Cone.MaxPt)]
DT.y <- DT.y[, Cone.QCDaware := merge.leptons.nolabel(Cone.QCDaware)]
DT.y <- DT.y[, GA.QCDaware := merge.leptons.nolabel(GA.QCDaware)]
DT.y <- DT.y[, GA.MaxPt := merge.leptons.nolabel(GA.MaxPt)]
DT.y <- DT.y[, GA.Reclustered := merge.leptons.nolabel(GA.Reclustered)]
# Create special character labels in unicode:
gamma <- "\U03B3" # a letter gamma
tau <- "\U03C4" # a letter tau
none <- "\U2205" # null sign
factor.label <- function(x) {
x <- factor(x)
levels(x) <- list("\U2205" = "0", # null (empty set) symbol
"q" = "1",
"c" = "4",
"b" = "5",
"e" = "11",
"\U03BC" = "13", # a Greek letter mu
"\U03C4" = "15", # a Greek letter tau
"g" = "21",
"\U03B3" = "22" # a Greek letter gamma
)
droplevels(x)
}
DT.y <- DT.y[, Cone.MaxPt := factor.label(Cone.MaxPt)]
DT.y <- DT.y[, Cone.QCDaware := factor.label(Cone.QCDaware)]
DT.y <- DT.y[, GA.QCDaware := factor.label(GA.QCDaware)]
DT.y <- DT.y[, GA.MaxPt := factor.label(GA.MaxPt)]
DT.y <- DT.y[, GA.Reclustered := factor.label(GA.Reclustered)]
Store(DT.y)
if(DRAFT) print(
sapply(DT.y[, (label.schemes), with = FALSE], function(x) sort(unique(x)))
)
# Utility function; are pairs equal?
distinct.pairs <- function(x) {
x[2] != x[3]
}
Objects()
plot(biplot.poly)
require(ggbiploy)
require(ggbiplot)
require(ggplot2)
plot(biplot.poly)
